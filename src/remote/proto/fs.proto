// Defines messages for communicating with the remote filesystem storage.
// N.B. Errors are typically returned as gRPC error codes, not in the proto message.

syntax = "proto3";

package fs;

option go_package = "github.com/thought-machine/please/src/remote/proto/fs";

service RemoteFS {
    // N.B. All requests can be directed to any node of the cluster - but information exposed
    //      by Info is intended to be used to enable "fat" clients that know
    //      where best to route to in order to improve efficiency.

    // Retrieves information about the topology of the cluster.
    // The response is a stream in order to receive further updates about the cluster.
    rpc Info(InfoRequest) returns (stream InfoResponse);

    // Retrieves a file from the server.
    // Content is streamed back in chunks for efficiency.
    rpc Get(GetRequest) returns (stream GetResponse);

    // Submits a new file to the server.
    // Content is streamed up in chunks.
    rpc Put(stream PutRequest) returns (PutResponse);
}

message InfoRequest {
}

message InfoResponse {
    // Describes all the nodes in the cluster
    repeated Node node = 1;
    // Describes the node that is replying to this request.
    // This will therefore duplicate one of the nodes above.
    Node this_node = 2;
}

message Node {
    // Public-facing address (i.e. IP or URL)
    string address = 1;
    // Friendly name of the server (has no particular significance)
    string name = 2;
    // Describes the hashes this node is responsible for.
    repeated Range ranges = 3;
    // True if the node is currently online
    bool online = 4;
}

message Range {
    // Lowest hash that this range stores (inclusive)
    fixed64 start = 1;
    // Highest hash that this range stores (inclusive)
    fixed64 end = 2;
}

message GetRequest {
    // Hash of the file.
    // The hash strategy is decided by the client (and they must therefore take care about
    // changing it); the server just maps them into the appropriate ranges.
    fixed64 hash = 1;
    // Name of the file to retrieve.
    // There may be multiple stored against each hash.
    string name = 2;
    // Size of chunks to send response in.
    // The server will try to honour this but might override it if it chooses.
    uint32 chunk_size = 3;
}

message GetResponse {
    // Chunks of file content.
    bytes chunk = 1;
}

message PutRequest {
    // Hash of the file.
    // Only needs to be passed in the first message.
    fixed64 hash = 1;
    // Name of the file.
    // Only needs to be passed in the first message.
    string name = 2;
    // Chunk of data. Any size is accepted but the client is encouraged to use something sensible.
    bytes chunk = 3;
    // True if the client wants to cancel this request.
    bool cancel = 4;
}

message PutResponse {
}
