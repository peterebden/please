// Defines messages relating to communication between the master & worker.
// This isn't quite the same as the main proto; among other things the
// relationship is reversed (i.e. the client sends a request to a master, but it's
// a response that's sent to the worker). This is all internal implementation
// detail though, the rest of Please knows nothing of it.

syntax = "proto3";

import "src/remote/proto/remote.proto";
option go_package = "github.com/thought-machine/please/tools/mettle/proto/worker";

service RemoteMaster {
    // Communication between the master & worker. The workers connect as the client
    // (since they are ephemeral and the master has a fixed location) and the master
    // submits jobs to them via this stream.
    rpc Work(stream WorkRequest) returns (stream WorkResponse);
    // Used for heartbeating workers to detect when they go away.
    // This should always be connected after the first request is sent to Work.
    rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse);
}

message WorkRequest {
    // A name identifying this worker.
    string name = 1;
    // Sent as a response to completed tasks.
    remote.RemoteTaskResponse response = 2;
}

message WorkResponse {
    // Sent when the server is shutting down.
    bool shutdown = 1;
    // Sent when remote work is dispatched to this worker.
    remote.RemoteTaskRequest request = 2;
}

message HeartbeatRequest {
    // A name identifying this worker.
    string name = 1;
}

message HeartbeatResponse {
}
