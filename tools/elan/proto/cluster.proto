// Defines messages for internal cluster communication.

syntax = "proto3";

import "src/remote/proto/fs.proto";

option go_package = "github.com/thought-machine/please/tools/elan/proto/cluster";

package cluster;

service Elan {
    // Returns information about the current state of the cluster.
    rpc ClusterInfo(ClusterInfoRequest) returns (ClusterInfoResponse);
    // Replicate is just like Put except that it does not trigger further replication.
    rpc Replicate(stream fs.PutRequest) returns (fs.PutResponse);
    // Similarly Retrieve is just like Get except that it can't be delegated to another node.
    rpc Retrieve(fs.GetRequest) returns (stream fs.GetResponse);
}

message Config {
    // Configuration that each node serialises in order to restore itself after startup.

    // Details of this node
    fs.Node this_node = 1;
    // All known other nodes
    repeated fs.Node nodes = 2;
    // True if this node has previously completed initialisation
    bool initialised = 3;
}

message ClusterInfoRequest {
}

message ClusterInfoResponse {
    // True if the cluster doesn't have any configuration-level problems
    bool healthy = 1;
    // Any messages about the state of things
    string msg = 2;
    // The current set of nodes
    repeated fs.Node nodes = 3;
    // The current set of segments
    repeated Segment segments = 4;
}

message Segment {
    // Start of the hash range (inclusive)
    fixed64 Start = 1;
    // End of the hash range (inclusive)
    fixed64 End = 2;
    // Name of the node that occupies it
    string name = 3;
}
